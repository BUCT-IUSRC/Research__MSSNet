# Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.

"""
Ref: https://github.com/facebookresearch/detectron2/blob/22e04d1432363be727797a081e3e9d48981f5189/detectron2/utils/colormap.py
An awesome colormap for really neat visualizations.
Copied from Detectron, and removed gray colors.
"""

import numpy as np

__all__ = ["colormap", "random_color"]

# fmt: off
# RGB:
_COLORS = np.array(
    [
        0.000, 0.447, 0.741,
        0.850, 0.325, 0.098,
        0.929, 0.694, 0.125,
        0.494, 0.184, 0.556,
        0.466, 0.674, 0.188,
        0.301, 0.745, 0.933,
        0.635, 0.078, 0.184,
        0.300, 0.300, 0.300,
        0.600, 0.600, 0.600,
        1.000, 0.000, 0.000,
        1.000, 0.500, 0.000,
        0.749, 0.749, 0.000,
        0.000, 1.000, 0.000,
        0.000, 0.000, 1.000,
        0.667, 0.000, 1.000,
        0.333, 0.333, 0.000,
        0.333, 0.667, 0.000,
        0.333, 1.000, 0.000,
        0.667, 0.333, 0.000,
        0.667, 0.667, 0.000,
        0.667, 1.000, 0.000,
        1.000, 0.333, 0.000,
        1.000, 0.667, 0.000,
        1.000, 1.000, 0.000,
        0.000, 0.333, 0.500,
        0.000, 0.667, 0.500,
        0.000, 1.000, 0.500,
        0.333, 0.000, 0.500,
        0.333, 0.333, 0.500,
        0.333, 0.667, 0.500,
        0.333, 1.000, 0.500,
        0.667, 0.000, 0.500,
        0.667, 0.333, 0.500,
        0.667, 0.667, 0.500,
        0.667, 1.000, 0.500,
        1.000, 0.000, 0.500,
        1.000, 0.333, 0.500,
        1.000, 0.667, 0.500,
        1.000, 1.000, 0.500,
        0.000, 0.333, 1.000,
        0.000, 0.667, 1.000,
        0.000, 1.000, 1.000,
        0.333, 0.000, 1.000,
        0.333, 0.333, 1.000,
        0.333, 0.667, 1.000,
        0.333, 1.000, 1.000,
        0.667, 0.000, 1.000,
        0.667, 0.333, 1.000,
        0.667, 0.667, 1.000,
        0.667, 1.000, 1.000,
        1.000, 0.000, 1.000,
        1.000, 0.333, 1.000,
        1.000, 0.667, 1.000,
        0.333, 0.000, 0.000,
        0.500, 0.000, 0.000,
        0.667, 0.000, 0.000,
        0.833, 0.000, 0.000,
        1.000, 0.000, 0.000,
        0.000, 0.167, 0.000,
        0.000, 0.333, 0.000,
        0.000, 0.500, 0.000,
        0.000, 0.667, 0.000,
        0.000, 0.833, 0.000,
        0.000, 1.000, 0.000,
        0.000, 0.000, 0.167,
        0.000, 0.000, 0.333,
        0.000, 0.000, 0.500,
        0.000, 0.000, 0.667,
        0.000, 0.000, 0.833,
        0.000, 0.000, 1.000,
        0.000, 0.000, 0.000,
        0.143, 0.143, 0.143,
        0.857, 0.857, 0.857,
        1.000, 1.000, 1.000
    ]
).astype(np.float32).reshape(-1, 3)
# fmt: on

class_map = {
    0 : 0,
    1 : 0 ,
    2 : 0 ,
    3 : 0 ,
    4 : 0 ,
    5 : 0 ,
    6 : 0 ,
    7 : 0 ,
    8 : 0 ,
    9 : 0 ,
    10 : 0 ,
    11 : 0 ,
    12 : 0 ,
    13 : 0 ,
    14 : 0 ,
    15 : 0 ,
    16 : 0 ,
    17 : 0 ,
    18 : 0 ,
    19 : 0 ,
    20 : 0 ,
    21 : 0 ,
    22 : 0 ,
    23 : 0 ,
    24 : 0 ,
    25 : 0 ,
    26 : 0 ,
    27 : 0 ,
    28 : 0 ,
    29 : 0 ,
    30 : 0 ,
    31 : 0 ,
    32 : 0 ,
    33 : 0 ,
    34 : 0 ,
    35 : 50 ,
    36 : 0 ,
    37 : 0 ,
    38 : 0 ,
    39 : 0 ,
    40 : 0 ,
    41 : 0 ,
    42 : 0 ,
    43 : 0 ,
    44 : 0 ,
    45 : 0 ,
    46 : 0 ,
    47 : 0 ,
    48 : 0 ,
    49 : 0 ,
    50 : 0 ,
    51 : 0 ,
    52 : 0 ,
    53 : 0 ,
    54 : 0 ,
    55 : 0 ,
    56 : 0 ,
    57 : 0 ,
    58 : 0 ,
    59 : 0 ,
    60 : 0 ,
    61 : 0 ,
    62 : 0 ,
    63 : 0 ,
    64 : 0 ,
    65 : 0 ,
    66 : 0 ,
    67 : 0 ,
    68 : 0 ,
    69 : 0 ,
    70 : 0 ,
    71 : 0 ,
    72 : 0 ,
    73 : 0 ,
    74 : 0 ,
    75 : 0 ,
    76 : 0 ,
    77 : 0 ,
    78 : 0 ,
    79 : 0 ,
    80 : 0 ,
    81 : 0 ,
    82 : 0 ,
    83 : 0 ,
    84 : 0 ,
    85 : 0 ,
    86 : 0 ,
    87 : 0 ,
    88 : 0 ,
    89 : 0 ,
    90 : 0 ,
    91 : 0 ,
    92 : 0 ,
    93 : 0 ,
    94 : 49 ,
    95 : 49 ,
    96 : 49 ,
    97 : 49 ,
    98 : 40 ,
    99 : 49 ,
    100 : 48 ,
    101 : 49 ,
    102 : 49 ,
    103 : 0 ,
    104 : 0 ,
    105 : 0 ,
    106 : 0 ,
    107 : 0 ,
    108 : 0 ,
    109 : 0 ,
    110 : 0 ,
    111 : 0 ,
    112 : 0 ,
    113 : 0 ,
    114 : 0 ,
    115 : 0 ,
    116 : 0 ,
    117 : 0 ,
    118 : 0 ,
    119 : 0 ,
    120 : 0 ,
    121 : 0 ,
    122 : 0 ,
    123 : 0 ,
    124 : 0 ,
    125 : 30 ,
    126 : 31 ,
    127 : 31 ,
    128 : 32 ,
    129 : 0 ,
    130 : 0 ,
    131 : 0 ,
    132 : 0 ,
    133 : 0 ,
    134 : 0 ,
    135 : 81 ,
    136 : 0 ,
    137 : 0 ,
    138 : 0 ,
    139 : 0 ,
    140 : 0 ,
    141 : 0 ,
    142 : 0 ,
    143 : 0 ,
    144 : 51 ,
    145 : 52 ,
    146 : 52 ,
    147 : 0 ,
    148 : 0 ,
    149 : 0 ,
    150 : 0 ,
    151 : 0 ,
    152 : 0 ,
    153 : 0 ,
    154 : 0 ,
    155 : 0 ,
    156 : 0 ,
    157 : 0 ,
    158 : 0 ,
    159 : 0 ,
    160 : 0 ,
    161 : 0 ,
    162 : 0 ,
    163 : 0 ,
    164 : 0 ,
    165 : 0 ,
    166 : 0 ,
    167 : 0 ,
    168 : 0 ,
    169 : 0 ,
    170 : 0 ,
    171 : 0 ,
    172 : 0 ,
    173 : 0 ,
    174 : 70 ,
    175 : 11 ,
    176 : 10 ,
    177 : 20 ,
    178 : 15 ,
    179 : 20 ,
    180 : 13 ,
    181 : 16 ,
    182 : 18 ,
    183 : 20 ,
    184 : 20 ,
    185 : 20 ,
    186 : 0 ,
    187 : 0 ,
    188 : 0 ,
    189 : 0 ,
    190 : 0 ,
    191 : 0 ,
    192 : 0 ,
    193 : 0 ,
    194 : 0
}

color_map = {
    0 : [0, 0, 0],
    1 : [0, 0, 255],
    10: [245, 150, 100],
    11: [245, 230, 100],
    13: [250, 80, 100],
    15: [150, 60, 30],
    16: [255, 0, 0],
    18: [180, 30, 80],
    20: [255, 0, 0],
    30: [30, 30, 255],
    31: [200, 40, 255],
    32: [90, 30, 150],
    40: [255, 0, 255],
    44: [255, 150, 255],
    48: [75, 0, 75],
    49: [75, 0, 175],
    50: [0, 200, 255],
    51: [50, 120, 255],
    52: [0, 150, 255],
    60: [170, 255, 150],
    70: [0, 175, 0],
    71: [0, 60, 135],
    72: [80, 240, 150],
    80: [150, 240, 255],
    81: [0, 0, 255],
    99: [255, 255, 50],
    252: [245, 150, 100],
    256: [255, 0, 0],
    253: [200, 40, 255],
    254: [30, 30, 255],
    255: [90, 30, 150],
    257: [250, 80, 100],
    258: [180, 30, 80],
    259: [255, 0, 0]
}

def colormap(rgb=False, maximum=255):
    """
    Args:
        rgb (bool): whether to return RGB colors or BGR colors.
        maximum (int): either 255 or 1

    Returns:
        ndarray: a float32 array of Nx3 colors, in range [0, 255] or [0, 1]
    """
    assert maximum in [255, 1], maximum
    c = _COLORS * maximum
    if not rgb:
        c = c[:, ::-1]
    return c


def random_color(rgb=False, maximum=255):
    """
    Args:
        rgb (bool): whether to return RGB colors or BGR colors.
        maximum (int): either 255 or 1

    Returns:
        ndarray: a vector of 3 numbers
    """
    idx = np.random.randint(0, len(_COLORS))
    ret = _COLORS[idx] * maximum
    if not rgb:
        ret = ret[::-1]
    return ret


def fixed_color(rgb=False, maximum=255, idx: int = 0):
    """ """
    num_colors = _COLORS.shape[0]
    ret = _COLORS[idx % num_colors] * maximum
    if not rgb:
        ret = ret[::-1]
    return ret

def point_color(rgb=False, maximum=255, idx: int = 0):
    color = color_map[class_map[idx]]
    color = np.array(color) / 255.0
    return color